package org.opensimulationsystems.cabsf.common.csfmodel;

import java.util.HashMap;
import java.util.UUID;

// TODO: Auto-generated Javadoc

/**
 * The Simulation Run Group identifies a group of simulation runs. For example, a specific
 * simulation could be configured to run twice. The Simulation Run Group would span both
 * simulation runs.
 * 
 * @author Jorge Calderon
 * @version 0.1
 * @since 0.1
 */
/*
 * LOW: Add an arbitrary number of options to be set/query.
 */
/*
 * TODO: Determine how much of this to implement: A Simulation Run Group can consist of
 * multiple simulation runs. The Simulation Run Group is identified by the simulation
 * developer using the Common Simulation Framework. The ID should be globally unique and
 * specified in the configuration, therefore, it is not generated by the framework. Each
 * instance of the Simulation Run Group would have its own id generated by the framework
 * with each simulation group run, which is stored as a separate id from the overall
 * Simulation Run Group id.
 */
public class SimulationRunGroup {
	/**
	 * Simulation-specific IDs (Either from the simulation toolkit or from the simulation
	 * // administrator).
	 */
	private String simulationID;

	/** The simulation version id. */
	private String simulationVersionID;

	/** The simulation specification configuration id. */
	private String simulationSpecificationConfigurationID;

	// Common- Simulation-Framework-specific IDs
	/** The simulation run group id. */
	private String simulationRunGroupID;

	/** The simulation run group configuration id. */
	private String simulationRunGroupConfigurationID;

	/** The user specified configurations. */
	private HashMap<String, Object> userSpecifiedConfigurations;

	/** The simulation run group instance id. */
	private UUID simulationRunGroupInstanceID;

	/**
	 * Disabled constructor
	 */
	@SuppressWarnings("unused")
	private SimulationRunGroup() {
	}

	/**
	 * Note: The informatino below is hard coded for now. Implementing these IDs in a
	 * configurable way is left to future work.
	 * 
	 * Initializes a DistributedSystemSimulationRunGroup. The simulationID should be a
	 * unique id for the simulation. To ensure global uniqueness, a UUID should be
	 * generated (can be done with http://www.famkruithof.net/uuid/uuidgen), and set up in
	 * the Common Simulation Framework configuration, and supplied to this method. The
	 * optional simulationVersion allows the simulation authors to keep track of different
	 * versions of a simulation. simulationConfigurationID may be used for versioning of
	 * the Simulation Tool such as Repast (e.g. varying the number of agents or grid
	 * cells). commonSimulationFrameoworkConfigurationID may be used for versioning of
	 * Common Simulation Framework configuration (such changing the number of simulations
	 * runs to execute or number of ticks for each simulation run). It is assumed that all
	 * simulation runs in a simulation run group have the same configuration.
	 * 
	 * It is assumed that all simulation runs in a simulation run group have the same
	 * simulation specification.
	 * 
	 * This constructor must be followed up by a call to setSimulationFrameworkOptions
	 * method to set the Common-Simulation-Framework-specific configuration of the
	 * DistributedSystemSimulationRunGroup.
	 * 
	 * @param simulationID
	 *            The globally unique id for the simulation specification itself. Most
	 *            configuration items, such as the number of agents, would not normally
	 *            imply a difference id for the simulation. It is suggested that this
	 *            value be globally unique, generating a UUID and storing it with the
	 *            simulation specification files.
	 * @param simulationVersionID
	 *            An optional ID, stored statically, to specify the version of the
	 *            simulation specification. This ID should not be used to version
	 *            different configurable items of a simulation, such as the number of
	 *            agents, but rather is meant to version the more structural changes of a
	 *            simulation. If one is not provided, the simulation leaves this null.
	 * @param simulationSpecificationConfigurationID
	 *            An optional ID to track different simulation-toolkit-side configurations
	 *            for the simulation, especially for differing sets of configurable
	 *            initial conditions. For example, you may wish to run your simulation
	 *            with 100 agents, and then run it again with 200 agents. This ID could be
	 *            used to differentiate the results. Individual simulation runs in a
	 *            simulation run group may also have their own unique configurations, but
	 *            these differences are instead tracked in the SimulationRun object. If
	 *            the simulationSpecificationConfigurationID parameter is not supplied,
	 *            the framework keeps it null.
	 */
	// TODO: Provide mechanism for handling setting compatibility options for simulation
	// versions
	public SimulationRunGroup(final String simulationID,
			final String simulationVersionID,
			final String simulationSpecificationConfigurationID) {
		// Simulation-specific IDs (Either from the simulation toolkit or from the
		// simulation
		// administrator)
		this.simulationID = simulationID;
		this.simulationVersionID = simulationVersionID;
		this.simulationSpecificationConfigurationID = simulationSpecificationConfigurationID;

		// This RunGroup Instance
		this.simulationRunGroupInstanceID = UUID.randomUUID();
	}

	/**
	 * Gets the simulation id.
	 * 
	 * @return the simulation id
	 */
	public String getSimulationID() {
		return simulationID;
	}

	/**
	 * Gets the simulation run group configuration id.
	 * 
	 * @return the simulation run group configuration id
	 */
	public String getSimulationRunGroupConfigurationID() {
		return simulationRunGroupConfigurationID;
	}

	/**
	 * Gets the simulation run group id.
	 * 
	 * @return the simulation run group id
	 */
	public String getSimulationRunGroupID() {
		return simulationRunGroupID;
	}

	/**
	 * Gets the simulation run group instance id.
	 * 
	 * @return the simulation run group instance id
	 */
	public UUID getSimulationRunGroupInstanceID() {
		return simulationRunGroupInstanceID;
	}

	/**
	 * Gets the simulation specification configuration id.
	 * 
	 * @return the simulation specification configuration id
	 */
	public String getSimulationSpecificationConfigurationID() {
		return simulationSpecificationConfigurationID;
	}

	/**
	 * Gets the simulation version id.
	 * 
	 * @return the simulation version id
	 */
	public String getSimulationVersionID() {
		return simulationVersionID;
	}

	/**
	 * Gets the user specified configurations.
	 * 
	 * @return the user specified configurations
	 */
	public HashMap<String, Object> getUserSpecifiedConfigurations() {
		return userSpecifiedConfigurations;
	}

	/**
	 * Sets the simulation framework options.
	 * 
	 * Note: These values are hard-coded for now. Making these configurable is left to
	 * future work.
	 * 
	 * @param simulationRunGroupID
	 *            An optional ID stored statically to track a group of related simulation
	 *            runs for a simulation. Simulation runs in a group may be run
	 *            sequentially from the same process (such as an entire run through the
	 *            Repast Simphony Simulation Runner), in parallel using multiple machines,
	 *            or spaced out temporally. Using the same SimulationRunGroupID allows the
	 *            simulation results to be grouped together, which may be useful in
	 *            analysis with Monte Carlo methods. If the simulationRunGroupID is not
	 *            specified, the framework generates a new UUID. Any new executions of the
	 *            framework would generate a new simulationRunGroupID. For parallel
	 *            processing (future support), each execution thread's
	 *            SimulationRunGroupID would still be the same, as it is stored
	 *            statically. A separate ID is created internally for each instance of the
	 *            DistributedSystemSimulationRunGroup. Every new run through the
	 *            Simulation Framework would generate a new instance ID (a UUID).
	 * @param csfSimulationRunGroupConfigurationID
	 *            An optional ID to track the configuration ( from the framework
	 *            configuration file, not the simulation toolkit configuration file) of a
	 *            simulation run group, which is a group of related simulation runs. For
	 *            example, this configuration ID could version and track whether the
	 *            framework will connect to one set of distributed agents, or a different
	 *            set. If this parameter is not supplied, the framework keeps it null
	 * @param userSpecifiedConfigurations
	 *            An optional collection of user-specified configurations that vary along
	 *            domain-specific or other dimensions. This parameter only applies to
	 *            Simulation Run Groups. A similar parameter exists for the individual
	 *            simulation runs.
	 */
	public void setSimulationFrameworkOptions(final String simulationRunGroupID,
			final String csfSimulationRunGroupConfigurationID,
			final HashMap<String, Object> userSpecifiedConfigurations) {
		// Common-Simulation-Framework-specific IDs
		this.simulationRunGroupID = simulationRunGroupID;
		this.simulationRunGroupConfigurationID = csfSimulationRunGroupConfigurationID;
		this.userSpecifiedConfigurations = userSpecifiedConfigurations;

	}

}
