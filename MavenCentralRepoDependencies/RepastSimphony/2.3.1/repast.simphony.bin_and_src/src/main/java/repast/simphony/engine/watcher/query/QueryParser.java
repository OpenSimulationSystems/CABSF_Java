/* Generated By:JJTree&JavaCC: Do not edit this line. QueryParser.java */
package repast.simphony.engine.watcher.query;

public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants, QueryParserConstants {/*@bgen(jjtree)*/
  protected JJTQueryParserState jjtree = new JJTQueryParserState();public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    QueryParser t = new QueryParser(System.in);
    try {
      ASTStart n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  final public ASTStart Start() throws ParseException {
                           /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BooleanExpression();
      jj_consume_token(22);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void BooleanExpression() throws ParseException {
    QueryExpression();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
              ASTAndExpression jjtn001 = new ASTAndExpression(JJTANDEXPRESSION);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
        try {
          QueryExpression();
        } catch (Throwable jjte001) {
              if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte001 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte001;}
              }
              if (jjte001 instanceof ParseException) {
                {if (true) throw (ParseException)jjte001;}
              }
              {if (true) throw (Error)jjte001;}
        } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001,  2);
              }
        }
        break;
      case OR:
        jj_consume_token(OR);
             ASTOrExpression jjtn002 = new ASTOrExpression(JJTOREXPRESSION);
             boolean jjtc002 = true;
             jjtree.openNodeScope(jjtn002);
        try {
          QueryExpression();
        } catch (Throwable jjte002) {
             if (jjtc002) {
               jjtree.clearNodeScope(jjtn002);
               jjtc002 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte002 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte002;}
             }
             if (jjte002 instanceof ParseException) {
               {if (true) throw (ParseException)jjte002;}
             }
             {if (true) throw (Error)jjte002;}
        } finally {
             if (jjtc002) {
               jjtree.closeNodeScope(jjtn002,  2);
             }
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void QueryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINKED:
    case LINKED_FROM:
    case LINKED_TO:
    case COLOCATED:
    case WITHIN:
    case WITHIN_VN:
    case WITHIN_MOORE:
    case 23:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        jj_consume_token(23);
        BooleanExpression();
        jj_consume_token(24);
        break;
      case LINKED:
      case LINKED_FROM:
      case LINKED_TO:
      case COLOCATED:
      case WITHIN:
      case WITHIN_VN:
      case WITHIN_MOORE:
        Command();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case NOT:
      jj_consume_token(NOT);
                        ASTNot jjtn001 = new ASTNot(JJTNOT);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
      try {
        QueryExpression();
      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINKED:
    case LINKED_FROM:
    case LINKED_TO:
      Linked();
      break;
    case COLOCATED:
                  ASTColocated jjtn001 = new ASTColocated(JJTCOLOCATED);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(COLOCATED);
      } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
      }
      break;
    case WITHIN:
    case WITHIN_VN:
    case WITHIN_MOORE:
      Within();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Within() throws ParseException {
    if (jj_2_1(3)) {
      jj_consume_token(WITHIN);
      Number();
                                    ASTWithin jjtn001 = new ASTWithin(JJTWITHIN);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
      try {
        Name();
      } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      {if (true) throw (RuntimeException)jjte001;}
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      {if (true) throw (ParseException)jjte001;}
                                    }
                                    {if (true) throw (Error)jjte001;}
      } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                    }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITHIN:
        jj_consume_token(WITHIN);
                           ASTWithin jjtn002 = new ASTWithin(JJTWITHIN);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
        try {
          Number();
        } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte002;}
                           }
                           if (jjte002 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte002;}
                           }
                           {if (true) throw (Error)jjte002;}
        } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        if (jj_2_2(3)) {
          jj_consume_token(WITHIN_VN);
          Number();
                                       ASTWithinVN jjtn003 = new ASTWithinVN(JJTWITHINVN);
                                       boolean jjtc003 = true;
                                       jjtree.openNodeScope(jjtn003);
          try {
            Name();
          } catch (Throwable jjte003) {
                                       if (jjtc003) {
                                         jjtree.clearNodeScope(jjtn003);
                                         jjtc003 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte003 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte003;}
                                       }
                                       if (jjte003 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte003;}
                                       }
                                       {if (true) throw (Error)jjte003;}
          } finally {
                                       if (jjtc003) {
                                         jjtree.closeNodeScope(jjtn003,  2);
                                       }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WITHIN_VN:
            jj_consume_token(WITHIN_VN);
                              ASTWithinVN jjtn004 = new ASTWithinVN(JJTWITHINVN);
                              boolean jjtc004 = true;
                              jjtree.openNodeScope(jjtn004);
            try {
              Number();
            } catch (Throwable jjte004) {
                              if (jjtc004) {
                                jjtree.clearNodeScope(jjtn004);
                                jjtc004 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte004 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte004;}
                              }
                              if (jjte004 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte004;}
                              }
                              {if (true) throw (Error)jjte004;}
            } finally {
                              if (jjtc004) {
                                jjtree.closeNodeScope(jjtn004, true);
                              }
            }
            break;
          default:
            jj_la1[6] = jj_gen;
            if (jj_2_3(3)) {
              jj_consume_token(WITHIN_MOORE);
              Number();
                                          ASTWithinMoore jjtn005 = new ASTWithinMoore(JJTWITHINMOORE);
                                          boolean jjtc005 = true;
                                          jjtree.openNodeScope(jjtn005);
              try {
                Name();
              } catch (Throwable jjte005) {
                                          if (jjtc005) {
                                            jjtree.clearNodeScope(jjtn005);
                                            jjtc005 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte005 instanceof RuntimeException) {
                                            {if (true) throw (RuntimeException)jjte005;}
                                          }
                                          if (jjte005 instanceof ParseException) {
                                            {if (true) throw (ParseException)jjte005;}
                                          }
                                          {if (true) throw (Error)jjte005;}
              } finally {
                                          if (jjtc005) {
                                            jjtree.closeNodeScope(jjtn005,  2);
                                          }
              }
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case WITHIN_MOORE:
                jj_consume_token(WITHIN_MOORE);
                                 ASTWithinMoore jjtn006 = new ASTWithinMoore(JJTWITHINMOORE);
                                 boolean jjtc006 = true;
                                 jjtree.openNodeScope(jjtn006);
                try {
                  Number();
                } catch (Throwable jjte006) {
                                 if (jjtc006) {
                                   jjtree.clearNodeScope(jjtn006);
                                   jjtc006 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte006 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte006;}
                                 }
                                 if (jjte006 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte006;}
                                 }
                                 {if (true) throw (Error)jjte006;}
                } finally {
                                 if (jjtc006) {
                                   jjtree.closeNodeScope(jjtn006, true);
                                 }
                }
                break;
              default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void Linked() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LINKED:
      jj_consume_token(LINKED);
                           ASTLinked jjtn001 = new ASTLinked(JJTLINKED);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          Name();
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                           }
      }
      break;
    case LINKED_TO:
      jj_consume_token(LINKED_TO);
                              ASTLinkedTo jjtn002 = new ASTLinkedTo(JJTLINKEDTO);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          Name();
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
      }
      break;
    case LINKED_FROM:
      jj_consume_token(LINKED_FROM);
                                ASTLinkedFrom jjtn003 = new ASTLinkedFrom(JJTLINKEDFROM);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NAME:
          Name();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } catch (Throwable jjte003) {
                                if (jjtc003) {
                                  jjtree.clearNodeScope(jjtn003);
                                  jjtc003 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte003 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte003;}
                                }
                                if (jjte003 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte003;}
                                }
                                {if (true) throw (Error)jjte003;}
      } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Number() throws ParseException {
 /*@bgen(jjtree) Number */
        ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECNUMBER:
        t = jj_consume_token(DECNUMBER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNumber(t.image);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setNumber(t.image);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) Name */
        ASTName jjtn000 = new ASTName(JJTNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(t.image.substring(1, t.image.length() - 1));
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_3() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_5() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(WITHIN_VN)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3R_4() {
    if (jj_scan_token(DECNUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(WITHIN)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(WITHIN_MOORE)) return true;
    if (jj_3R_2()) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x3000,0x3000,0x9fc000,0xbfc000,0x1fc000,0x40000,0x80000,0x100000,0x800,0x800,0x800,0x1c000,0x180,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public QueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryParser(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[25];
    for (int i = 0; i < 25; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
