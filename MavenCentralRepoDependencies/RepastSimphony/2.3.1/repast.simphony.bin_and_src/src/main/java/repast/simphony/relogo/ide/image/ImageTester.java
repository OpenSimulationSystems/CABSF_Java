/*
 * ImageTester.java
 *
 * Created on September 27, 2007, 4:23 PM
 */
package repast.simphony.relogo.ide.image;

import java.io.IOException;
import java.util.List;
import javax.swing.*;

import repast.simphony.relogo.image.NLImage;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.Reader;

/**
 *
 * @author  CBURKE
 */
public class ImageTester extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	ImagePanel customSurface;
    List<NLImage> imageList;
    int currentImageIndex;
    DefaultComboBoxModel imageSelectionModel;
    
    public boolean scan(Reader r) {
        BufferedReader rdr = new BufferedReader(r);
        int sectionIndex = 0;
        int linesInSection = 0;
        StringBuffer sectionBuffer = new StringBuffer();
        try {
            ImageSectionParser turtleParser = null;
            for (String line = rdr.readLine(); line != null; line = rdr.readLine()) {
                if (line.equals("@#$#@#$#@")) {
                    // code_section windows_section doc_section image_section ver_section pre_section ser_section bsp_section?
                    switch (sectionIndex) {
                        case 0: // code section
                            break;
                        case 1: // control section
                            break;
                        case 2: // documentation section
                            break;
                        case 3: // turtle vector graphics section
                            turtleParser = new ImageSectionParser(sectionBuffer);
                            if (turtleParser.errorCount() == 0) {
                                imageList = turtleParser.getModel();
                            }
                            break;
                        case 4: // NetLogo version number section
                            break;
                        case 5: // preview section
                            break;
                        case 6: // System Dynamics section
                            break;
                        case 7: // Behavior Space section (XML-ish)
                            break;
                        case 8: // HubNet section (similar to controls section)
                            break;
                        case 9: // ??? section
                            break;
                        default: // any other sections
                            break;
                    }
                    sectionIndex++;
                    linesInSection = 0;
                    sectionBuffer.setLength(0);
                } else {
                    sectionBuffer.append(line);
                    sectionBuffer.append('\n');
                    linesInSection++;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }

    /** Creates new form ImageTester */
    public ImageTester() {
//        this("/Applications/NetLogo 4.0.4/models/Curricular Models/BEAGLE Evolution/Altruism.nlogo");
    	this("/Applications/NetLogo 4.0.4/models/Sample Models/Biology/Rabbits Grass Weeds.nlogo");
    }

    /** Creates new form ImageTester */
    public ImageTester(String netlogoFile) {
        imageSelectionModel = new DefaultComboBoxModel();
        initComponents();
        customSurface = new ImagePanel();
        customSurface.setVisible(true);
        customSurface.setOpaque(false);
        jPanel1.add(customSurface);

        try {
            FileReader rdr = new FileReader(netlogoFile);
            if (scan(rdr)) {
                for (NLImage img : imageList) {
                    imageSelectionModel.addElement(img.getName());
                }
                imageSelectionModel.setSelectedItem(imageSelectionModel.getElementAt(currentImageIndex));
                customSurface.setImage(imageList.get(currentImageIndex));
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        imageSelector = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.FlowLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 51));
        jPanel1.setPreferredSize(new java.awt.Dimension(300, 300));
        jPanel1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel1);

        jButton1.setText("Next");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);

        imageSelector.setModel(imageSelectionModel);
        imageSelector.setAutoscrolls(true);
        imageSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageSelected(evt);
            }
        });
        getContentPane().add(imageSelector);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        currentImageIndex++;
        if (currentImageIndex >= imageList.size()) {
            currentImageIndex = 0;
        }
        imageSelectionModel.setSelectedItem(imageSelectionModel.getElementAt(currentImageIndex));
        customSurface.setImage(imageList.get(currentImageIndex));
    }//GEN-LAST:event_jButton1ActionPerformed

    private void imageSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageSelected
        currentImageIndex = imageSelectionModel.getIndexOf(imageSelectionModel.getSelectedItem());
        imageSelectionModel.setSelectedItem(imageSelectionModel.getElementAt(currentImageIndex));
        customSurface.setImage(imageList.get(currentImageIndex));
    }//GEN-LAST:event_imageSelected

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        if (args.length > 0) {
            System.out.println("Loading icons from "+args[0]);
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    new ImageTester(args[0]).setVisible(true);
                }
            });
        } else {
            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    JFrame jf = new ImageTester();
                    jf.pack();
                    jf.setVisible(true);
                }
            });
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox imageSelector;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
