package org.simulationsystems.simulationframework.simulation.adapters.api;

import java.util.UUID;

/*
 * A Simulation Run Group can consist of multiple simulation runs.  The Simulation Run Group is identified by the simulation developer using the Common Simulation Framework.  The ID should be globally unique and specified in the configuration, therefore, it is not generated by the framework.  Each instance of the Simulation Run Group would have its own id generated by the framework with each simulation group run, which is stored as a separate id from the overall Simulation Run Group id.
 */
public class SimulationRunGroup {
	static private String simulationID;
	static private String simulationVersion;
	static private String simulationConfigurationID;
	private UUID simulationRunGroupInstanceID;

	/*
	 * Use the other constructor instead
	 */
	@SuppressWarnings("unused")
	private SimulationRunGroup() {
	}

	/*
	 * Initializes a SimulationRunGroup. The simulationID should be a unique id for the simulation.
	 * To ensure global uniqueness, a UUID should be generated (can be done with
	 * http://www.famkruithof.net/uuid/uuidgen), and set up in the Common Simulation Framework
	 * configuration, and supplied to this method.
	 * The optional simulationVersion allows the simulation authors to keep track of different versions of a simulation.
	 * simulationConfigurationID may be used for versioning of the Simulation Tool such as Repast (e.g. varying the number of agents or grid cells).
	 * commonSimulationFrameoworkConfigurationID may be used for versioning of Common Simulation Framework configuration (such changing the number of simulations runs to execute or number of ticks for each simulation run).
	 */
	public SimulationRunGroup(String simulationID, String simulationVersion,
			String simulationConfigurationID) {
		SimulationRunGroup.simulationID = simulationID;
		SimulationRunGroup.simulationVersion = simulationVersion;
		SimulationRunGroup.simulationConfigurationID = simulationConfigurationID;
		
		simulationRunGroupInstanceID = UUID.randomUUID();
	}

	public static String getSimulationID() {
		return simulationID;
	}

	public UUID getInstanceSimulationRunGroupInstanceID() {
		return simulationRunGroupInstanceID;
	}

}
